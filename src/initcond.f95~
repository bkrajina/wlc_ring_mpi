!! ---------------------------------------------------------------*
      
!     
!     This subroutine sets the initial condition for a chain
!     
!     Andrew Spakowitz
!     Written 4-16-04
      
      SUBROUTINE initcond(R,U,NT,N,NP,FRMFILE,PARA,RING,rand_stat)
      
      use mersenne_twister
      PARAMETER PI=3.141593D0
      IMPLICIT NONE
      DOUBLE PRECISION R(NT,3)  ! Bead positions
      DOUBLE PRECISION U(NT,3)  ! Tangent vectors
      INTEGER N,NP,NT           ! Number of beads
      DOUBLE PRECISION GAM       ! Equil bead separation
      DOUBLE PRECISION LBOX     ! Box edge length
      INTEGER I,J,IB            ! Index Holders
      INTEGER FRMFILE           ! Is conformation in file?
      INTEGER INPUT             ! Is input file set?
      INTEGER RING              ! Is polymer a ring?
      DOUBLE PRECISION RMIN
      DOUBLE PRECISION R0(3)
      DOUBLE PRECISION PARA(10)
      type(random_stat) rand_stat  ! state of random number chain
      real u(1)        !random number
      
      
!     Setup the choice parameters
      
      INPUT=1


!     Input the conformation if FRMFILE=1
      
      if(FRMFILE.EQ.1)then
         OPEN (UNIT = 5, FILE = 'initial/snap', STATUS = 'OLD')
         DO  I=1,N
            READ(5,*) R(I,1),R(I,2),R(I,3)
         ENDDO
         CLOSE(5)
         
      endif
      
!     Set the initial conformation to a straight chain if CHOICE=1 and RING=0
!     Set initial conformation to a circle if RING=1
      
      if(FRMFILE.EQ.0)then
         
!     Fix the initial condition
         
         if (INPUT.EQ.0) then
            LBOX=10.
            GAM=1.
         else
            GAM=PARA(4)
            LBOX=PARA(8)
         endif
         
         IB=1
         DO  I=1,NP
            call random_number(u,rand_stat)
            R0(1)=u(1)*LBOX
            call random_number(u,rand_stat)
            R0(2)=u(1)*LBOX
            call random_number(u,rand_stat)
            R0(3)=u(1)*LBOX
            DO  J=1,N
		IF (RING.EQ.0) THEN
                           R(IB,1)=R0(1)
			   R(IB,2)=R0(2)+GAM*(J-N/2.-0.5)
			   R(IB,3)=R0(3)
			   U(IB,1)=0.
			   U(IB,2)=1.
			   U(IB,3)=0.			   
                ELSE
                   R(IB,1)=R0(1)+((GAM*N)/(2*PI))*Cos(J*2*PI/N)
                   R(IB,2)=R0(2)+((GAM*N)/(2*PI))*Sin(J*2*PI/N)
                   R(IB,3)=0
                   U(IB,1)=-Sin(J*2*PI/N)
                   U(IB,2)=Cos(J*2*PI/N)
                   U(IB,3)=0;
                ENDIF
              IB=IB+1
           ENDDO
        ENDDO
         
      endif
      
      RETURN     
    END SUBROUTINE initcond
      
!---------------------------------------------------------------*
